generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model logs {
  id        Int      @id @default(autoincrement())
  name      String //PORT SCAN
  host      String?
  timestamp DateTime @default(now())
  piuser    String?
  pid       Int?
  action    String? //PROTOCOL
  cpu       Float?
  mem       Float?
  command   String? //SCANTYPE
  port      Int?
  ipAddress String?
  @@map("logs")
}

model auth {
  id         Int      @id @default(autoincrement())
  timestamp  DateTime @default(now())
  username   String
  log_entry  String
}

model memory_usage {
  id             Int      @id @default(autoincrement())
  total_memory   BigInt
  used_memory    BigInt
  free_memory    BigInt
  available_memory BigInt
  percent_usage  Float
  host           String?
  time           DateTime @default(now())
}

model system_metrics {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime @default(now())
  sensor_name String
  value_type  String
  value       Float
  host        String
}

model notes {
  id          Int      @id @default(autoincrement())
  title       String
  time        DateTime @default(now())
  description String
}

model devices {
  id          Int      @id @default(autoincrement())
  name        String
  ip_address  String?
  mac_address String?
  password    String?
  time        DateTime @default(now())
  notes       String
  users       DeviceUser[]
}

model User {
  id          Int      @id @default(autoincrement())
  username    String  @unique
  password    String
  email       String? @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  devices     DeviceUser[]

  ActivityLog ActivityLog[]
}

model DeviceUser {
  id       Int    @id @default(autoincrement())
  userId   Int
  deviceId Int
  role     String // Example: "admin", "viewer", "operator"
  
  user     User   @relation(fields: [userId], references: [id])
  device   devices @relation(fields: [deviceId], references: [id])

  @@unique([userId, deviceId]) // Ensure a user-device pair is unique
}

model RuleGroup {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rules     Rule[]
}

model Rule {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  groupId     Int?
  
  group       RuleGroup? @relation(fields: [groupId], references: [id])
  commands    Command[]
}

model Command {
  id        Int      @id @default(autoincrement())
  ruleId    Int
  command   String  // Example: "ls -la", "rm -rf /"
  
  rule      Rule @relation(fields: [ruleId], references: [id])
}
model ActivityLog {
  id         Int      @id @default(autoincrement())
  userId     Int
  actionType String   // e.g., "Created User", "Deleted Device"
  targetType String   // e.g., "User", "Device"
  targetId   Int?     // ID of the affected entity (if applicable)
  details    String?  // Optional additional details
  timestamp  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
