generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model logs {
  id        Int      @id @default(autoincrement())
  name      String //PORT SCAN
  host      String?
  timestamp DateTime @default(now())
  piuser    String?
  pid       Int?
  action    String? //PROTOCOL
  cpu       Float?
  mem       Float?
  command   String? //SCANTYPE
  port      Int?
  ipAddress String?
  @@map("logs")
}

model auth {
  id         Int      @id @default(autoincrement())
  timestamp  DateTime @default(now())
  username   String
  log_entry  String
}

model memory_usage {
  id             Int      @id @default(autoincrement())
  total_memory   BigInt
  used_memory    BigInt
  free_memory    BigInt
  available_memory BigInt
  percent_usage  Float
  host           String?
  time           DateTime @default(now())
}

model system_metrics {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime @default(now())
  sensor_name String
  value_type  String
  value       Float
  host        String
}

model notes {
  id          Int      @id @default(autoincrement())
  title       String
  time        DateTime @default(now())
  description String
}

model devices {
  id          Int      @id @default(autoincrement())
  name        String
  ip_address  String?
  mac_address String?
  password    String?
  time        DateTime @default(now())
  notes       String
  users       DeviceUser[]
  status     String   @default("online")
}




model DeviceUser {
  id       Int    @id @default(autoincrement())
  userId   Int
  deviceId Int
  role     String // Example: "admin", "viewer", "operator"
  
  user     User   @relation(fields: [userId], references: [id])
  device   devices @relation(fields: [deviceId], references: [id])

  @@unique([userId, deviceId]) // Ensure a user-device pair is unique
}

model Command {
  id        Int      @id @default(autoincrement())
  ruleId    Int
  command   String  // Example: "ls -la", "rm -rf /"

  emailTemplateId Int?  // Optional: Assign an email template
  emailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id])

  rule      Rule @relation(fields: [ruleId], references: [id])
  matches   CommandMatch[]
}

model Rule {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  groupId     Int?

  emailTemplateId Int?  // Optional: Assign an email template
  emailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id])

  group       RuleGroup? @relation(fields: [groupId], references: [id])
  commands    Command[]
  matches     CommandMatch[]
}

model RuleGroup {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  emailTemplateId Int?  // Optional: Assign an email template
  emailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id])

  rules       Rule[]
}

// New model to track command matches
model CommandMatch {
  id            Int      @id @default(autoincrement())
  logId         Int
  logType       String   // "system" or "auth"
  commandId     Int
  ruleId        Int
  commandText   String
  logEntry      String   @db.Text
  timestamp     DateTime @default(now())
  addressed     Boolean  @default(false)
  addressedBy   Int?
  addressedAt   DateTime @default(now())
  notes         String?  @db.Text
  emailSent     Boolean  @default(false)
  
  rule          Rule     @relation(fields: [ruleId], references: [id])
  command   Command  @relation(fields: [commandId], references: [id], onDelete: Cascade)
  addressedByUser User?  @relation(fields: [addressedBy], references: [id])

  User User[] @relation("addressedBy")
}

model ActivityLog {
  id         Int      @id @default(autoincrement())
  userId     Int
  actionType String   // e.g., "Created User", "Deleted Device"
  targetType String   // e.g., "User", "Device"
  targetId   Int?     // ID of the affected entity (if applicable)
  details    String?  // Optional additional details
  timestamp  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model EmailTemplate {
  id         Int      @id @default(autoincrement())
  name       String   // Template name (e.g., "High CPU Alert")
  subject    String   // Email subject
  body       String   // Email body template (with placeholders like {{user}}, {{rule}})
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  RuleGroup RuleGroup[]
  Rule Rule[]
  Command Command[]
  
  assignedUsers UserEmailTemplate[] // Many-to-many relationship

  SavedQuery SavedQuery[]
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  password    String
  email       String?  @unique
  role        String   @default("admin") // e.g., "admin", "viewer", "operator"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  devices     DeviceUser[]
  ActivityLog ActivityLog[]
  addressedMatches CommandMatch[] @relation("addressedBy")

  emailTemplates UserEmailTemplate[] // Many-to-many relationship

  CommandMatch CommandMatch[]

  NotificationRead NotificationRead[]
}

// Junction table for many-to-many relation between User & EmailTemplate
model UserEmailTemplate {
  userId        Int
  emailTemplateId Int
  assignedAt   DateTime @default(now())

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailTemplate EmailTemplate @relation(fields: [emailTemplateId], references: [id], onDelete: Cascade)

  @@id([userId, emailTemplateId]) // Composite primary key
}

model Roles{
  id          Int      @id @default(autoincrement())
  name        String
  description String
}


model Notification {
  id          Int               @id @default(autoincrement())
  title       String
  content     String
  postDate    DateTime          @default(now())
  expiryDate  DateTime?
  createdBy   Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  important   Boolean           @default(false)
  reads       NotificationRead[]
}

model NotificationRead {
  id             Int          @id @default(autoincrement())
  notificationId Int
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  userId         Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  readAt         DateTime     @default(now())

  @@unique([notificationId, userId])
}

model SavedQuery {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  tableName   String   // The selected table (e.g., "logs", "users")
  columns     String[] // Selected columns (Array of strings)
  conditions  Json?    // Store conditions as JSON for flexibility
  emailTemplateId Int? // Optional email template assignment
  emailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}