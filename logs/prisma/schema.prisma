generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model logs {
  id        Int      @id @default(autoincrement())
  name      String //PORT SCAN
  host      String?
  timestamp DateTime @default(now())
  piuser    String?
  pid       Int?
  action    String? //PROTOCOL
  cpu       Float?
  mem       Float?
  command   String? //SCANTYPE
  port      Int?
  ipAddress String?
  @@map("logs")
}

model auth {
  id         Int      @id @default(autoincrement())
  timestamp  DateTime @default(now())
  username   String
  log_entry  String
}

model memory_usage {
  id             Int      @id @default(autoincrement())
  total_memory   BigInt
  used_memory    BigInt
  free_memory    BigInt
  available_memory BigInt
  percent_usage  Float
  host           String?
  time           DateTime @default(now())
}

model system_metrics {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime @default(now())
  sensor_name String
  value_type  String  @default("VALUE")
  value       Float   @default(0.0)
  host        String
  min       String?

  max       String?
}
model diskmetric {
  id        Int   @id @default(autoincrement())
  host  String
  name      String
  label     String?
  totalgb   Float
  usedgb    Float
  freegb    Float
  timestamp DateTime @default(now())
}
model notes {
  id          Int      @id @default(autoincrement())
  title       String
  time        DateTime @default(now())
  description String
}

model devices {
  id          Int      @id @default(autoincrement())
  name        String
  ip_address  String?  @unique
  mac_address String?
  password    String?
  time        DateTime @default(now())
  notes       String
  users       DeviceUser[]
  status     String   @default("online")

  SupportTicket SupportTicket[]
}




model DeviceUser {
  id       Int    @id @default(autoincrement())
  userId   Int
  deviceId Int
  role     String // Example: "admin", "viewer", "operator"
  
  user     User   @relation(fields: [userId], references: [id])
  device   devices @relation(fields: [deviceId], references: [id])

  @@unique([userId, deviceId]) // Ensure a user-device pair is unique
}

model Command {
  id        Int      @id @default(autoincrement())
  ruleId    Int
  command   String  // Example: "ls -la", "rm -rf /"

  emailTemplateId Int?  // Optional: Assign an email template
  emailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id])

  rule      Rule @relation(fields: [ruleId], references: [id])
  matches   CommandMatch[]
}

model Rule {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  groupId     Int?

  emailTemplateId Int?  // Optional: Assign an email template
  emailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id])

  group       RuleGroup? @relation(fields: [groupId], references: [id])
  commands    Command[]
  matches     CommandMatch[]
}

model RuleGroup {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  emailTemplateId Int?  // Optional: Assign an email template
  emailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id])

  rules       Rule[]
}

// New model to track command matches
model CommandMatch {
  id            Int      @id @default(autoincrement())
  logId         Int
  logType       String   // "system" or "auth"
  commandId     Int
  ruleId        Int
  commandText   String
  logEntry      String   @db.Text
  timestamp     DateTime @default(now())
  addressed     Boolean  @default(false)
  addressedBy   Int?
  addressedAt   DateTime @default(now())
  notes         String?  @db.Text
  emailSent     Boolean  @default(false)
  
  rule          Rule     @relation(fields: [ruleId], references: [id])
  command   Command  @relation(fields: [commandId], references: [id], onDelete: Cascade)
  addressedByUser User?  @relation(fields: [addressedBy], references: [id])

  User User[] @relation("addressedBy")
}

model ActivityLog {
  id         Int      @id @default(autoincrement())
  userId     Int
  actionType String   // e.g., "Created User", "Deleted Device"
  targetType String   // e.g., "User", "Device"
  targetId   Int?     // ID of the affected entity (if applicable)
  details    String?  // Optional additional details
  timestamp  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model EmailTemplate {
  id         Int      @id @default(autoincrement())
  name       String   // Template name (e.g., "High CPU Alert")
  subject    String   // Email subject
  body       String   // Email body template (with placeholders like {{user}}, {{rule}})
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  RuleGroup RuleGroup[]
  Rule Rule[]
  Command Command[]
  
  assignedUsers UserEmailTemplate[] // Many-to-many relationship

  SavedQuery SavedQuery[]

  AlertCondition AlertCondition[]
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  password    String
  email       String?  @unique
  role        String[]   @default(["admin"]) // e.g., "admin", "viewer", "operator"
  Mobile      Int?
  PrimaryContact  String?
  MobileContact   Int?
  Relationship    String?
  SecondContact   String?
  SecondMobile    Int?
  SecondRelationship String?
  Remarks         String?
  ndafile         String?
  ndasubmissiondate DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  devices     DeviceUser[]
  ActivityLog ActivityLog[]
  addressedMatches CommandMatch[] @relation("addressedBy")

  emailTemplates UserEmailTemplate[] // Many-to-many relationship

  CommandMatch CommandMatch[]

  NotificationRead NotificationRead[]
  assignedTickets SupportTicket[] @relation("AssignedTickets")
  createdTickets  SupportTicket[] @relation("CreatedTickets")
  ticketComments  TicketComment[]

  Feedback Feedback[] @relation("FeedbackSender")

  FeedbackRecipient FeedbackRecipient[] @relation("FeedbackRecipient")

  GroupMember GroupMember[]

  Message Message[]

  TicketAttachment TicketAttachment[]

  UserPermission UserPermission[]

  ProjectAssignment ProjectAssignment[]
}
model Group {
  id          Int         @id @default(autoincrement())
  name        String
  members     GroupMember[]
  messages    Message[]
  createdBy   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model GroupMember {
  id        Int   @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  joinedAt  DateTime @default(now())

  @@unique([userId, groupId]) // Prevent duplicate entries
}

model Message {
  id        Int   @id @default(autoincrement())
  content   String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  edited    Boolean  @default(false)
  createdAt DateTime @default(now())
  fileAttachment String?
  fileOriginalName String?
  fileType String?
}
// Junction table for many-to-many relation between User & EmailTemplate
model UserEmailTemplate {
  userId        Int
  emailTemplateId Int
  assignedAt   DateTime @default(now())

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailTemplate EmailTemplate @relation(fields: [emailTemplateId], references: [id], onDelete: Cascade)

  @@id([userId, emailTemplateId]) // Composite primary key
}

model Roles{
  id          Int      @id @default(autoincrement())
  name        String
  description String
}


model Notification {
  id          Int               @id @default(autoincrement())
  title       String
  content     String
  postDate    DateTime          @default(now())
  expiryDate  DateTime?
  createdBy   Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  important   Boolean           @default(false)
  reads       NotificationRead[]
}

model NotificationRead {
  id             Int          @id @default(autoincrement())
  notificationId Int
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  userId         Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  readAt         DateTime     @default(now())

  @@unique([notificationId, userId])
}

model SavedQuery {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  tableName   String   // The selected table (e.g., "logs", "users")
  columns     String[] // Selected columns (Array of strings)
  conditions  Json?    // Store conditions as JSON for flexibility
  emailTemplateId Int? // Optional email template assignment
  emailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TicketComment {
  id          Int      @id @default(autoincrement())
  ticketId    Int
  userId      Int
  content     String   @db.Text
  createdAt   DateTime @default(now())

  ticket      SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  TicketAttachment TicketAttachment[]
}
model SupportTicket {
  id             Int      @id @default(autoincrement())
  title          String
  description    String   @db.Text
  status         String   @default("open") // open, in_progress, resolved, closed
  priority       String   @default("medium") // low, medium, high, critical
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  assignedToId   Int?     // Technician
  createdById    Int      // Requestor
  relatedDeviceId Int?    // Optional: if related to a device

  assignedTo     User?    @relation("AssignedTickets", fields: [assignedToId], references: [id])
  createdBy      User     @relation("CreatedTickets", fields: [createdById], references: [id])
  relatedDevice  devices? @relation(fields: [relatedDeviceId], references: [id])

  comments       TicketComment[]
  attachments TicketAttachment[] // New relation

}
model TicketAttachment {
  id          Int      @id @default(autoincrement())
  filename    String
  originalFilename String
  fileSize    Int
  mimeType    String
  createdAt   DateTime @default(now())
  
  // Relations - can be attached to either a ticket or a comment
  ticketId    Int?
  commentId   Int?
  uploaderId  Int
  
  ticket      SupportTicket? @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  comment     TicketComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  uploader    User           @relation(fields: [uploaderId], references: [id])
}
model AlertCondition {
  id              Int       @id @default(autoincrement())
  name            String    // e.g., "High CPU Temp", "Multiple Failed Logins"
  sourceTable     String    // e.g., "system_metrics", "auth"
  fieldName       String    // e.g., "value", "log_entry"
  comparator      String    // e.g., ">", "==", "contains"
  thresholdValue  String    // e.g., "90", "failed"
  timeWindowMin   Int?      // e.g., 5 minutes
  repeatIntervalMin Int?    // After how long to re-alert
  countThreshold  Int?      // e.g., 5 failures
  lastTriggeredAt DateTime? // Track last alert time
  active          Boolean   @default(true)

  emailTemplateId Int?
  emailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id], onDelete: SetNull)

  triggeredAlerts AlertEvent[]
}
model AlertEvent {
  id              Int       @id @default(autoincrement())
  conditionId     Int
  triggeredAt     DateTime  @default(now())
  resolved        Boolean   @default(false)
  resolvedAt      DateTime?
  notes           String?

  alertCondition  AlertCondition @relation(fields: [conditionId], references: [id])
}

model LibraryEntry {
  id           Int      @id @default(autoincrement())
  refNo        String   // e.g., "0001"
  category     String   // e.g., "PM9", "BC4", "LTA"
  title        String   @db.Text
  author       String?  // Nullable since author may be missing
  pubYear      Int?     // Nullable
  creationDate DateTime
  borrower     String?  // Name of borrower
  loanDate     DateTime? // Nullable loan date
  remarks      String?  @db.Text
attachmentUrl   String?
 attachmentFilename String?
   createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Feedback {
  id         Int                   @id @default(autoincrement())
  subject    String
  message    String                @db.Text
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  isRead     Boolean               @default(false)

  // Relations
  senderId   Int
  sender     User                  @relation("FeedbackSender", fields: [senderId], references: [id])

  recipients FeedbackRecipient[]
}

model FeedbackRecipient {
  id         Int       @id @default(autoincrement())
  feedbackId Int       // 🔧 Changed from String to Int
  userId     Int

  // Relations
  feedback   Feedback  @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  user       User      @relation("FeedbackRecipient", fields: [userId], references: [id])

  @@unique([feedbackId, userId])
}


model PagePermission {
  id         Int      @id @default(autoincrement())
  route      String   // e.g., "/logs", "/admin/settings"
  description String? // Optional: e.g., "View all system logs"
  createdAt  DateTime @default(now())

  allowedRoles   RolePermission[]
  allowedUsers   UserPermission[]
}
model RolePermission {
  id               Int      @id @default(autoincrement())
  roleName         String   // e.g., "admin", "viewer"
  pagePermissionId Int
  pagePermission   PagePermission @relation(fields: [pagePermissionId], references: [id])

  @@unique([roleName, pagePermissionId])
}
model UserPermission {
  id               Int      @id @default(autoincrement())
  userId           Int
  pagePermissionId Int
  user             User            @relation(fields: [userId], references: [id])
  pagePermission   PagePermission @relation(fields: [pagePermissionId], references: [id])

  @@unique([userId, pagePermissionId])
}

model pages{
  id              Int       @id @default(autoincrement())
notes String?
}

model ProjectType {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  projects    Project[]
}

model Project {
  id           Int       @id @default(autoincrement())
  businessCode String    // e.g., YWL
  projectCode  String    // e.g., 00001
  name         String
  createDate   DateTime @default(now())
  projectTypeId Int?
  projectType  ProjectType? @relation(fields: [projectTypeId], references: [id])

  models       ModelEntry[]    // Link to your model list per project
  assignments  ProjectAssignment[]
}

model ModelEntry {
  id          Int      @id @default(autoincrement())
  code        String   // e.g., "Bug fixing"
  description String?
  createDate  DateTime
  createBy    String
  modifyDate  DateTime?
  modifyBy    String?
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
}

model ProjectAssignment {
  id        Int    @id @default(autoincrement())
  userId    Int
  projectId Int
  role      String // e.g., "admin", "viewer", "member"

  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model location{
  id         Int      @id @default(autoincrement())
  code       String
  name       String
  modifyBy   String?
  createBy   String
  modifyDate DateTime? @default(now())
}
// schema.prisma
model ldapuser {
  id                     Int      @id @default(autoincrement())
  dn                     String
  objectClass            String[]
  cn                     String
  sn                     String?     // optional
  givenName              String?     // optional
  description            String?     // optional
  instanceType           Int
  whenCreated            BigInt
  whenChanged            BigInt
  uSNCreated             Int
  uSNChanged             Int
  showInAdvancedViewOnly Boolean?
  name                   String
  objectGUID             String
  userAccountControl     Int
  badPwdCount            Int
  codePage               Int
  countryCode            Int
  badPasswordTime        BigInt
  lastLogoff             BigInt
  lastLogon              BigInt
  pwdLastSet             BigInt
  primaryGroupID         Int
  objectSid              String
  adminCount             Int?
  accountExpires         BigInt
  logonCount             Int
  sAMAccountName         String
  sAMAccountType         Int
  servicePrincipalName   String?
  objectCategory         String
  isCriticalSystemObject Boolean?
  memberOf               String?
  userPrincipalName      String?     // optional
  displayName            String?     // optional
  distinguishedName      String

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}
